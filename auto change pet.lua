-- ƒê·ª£i game v√† Player load xong
repeat task.wait() until game:IsLoaded() and game.Players.LocalPlayer

-- Services & Player
local Players         = game:GetService("Players")
local ReplicatedStore = game:GetService("ReplicatedStorage")
local player          = Players.LocalPlayer

-- Modules
local GetFarm      = require(ReplicatedStore.Modules.GetFarm)
local Manhattan2D  = require(ReplicatedStore.Code.Manhattan2D)
local PetsService  = require(ReplicatedStore.Modules.PetServices.PetsService)

-- Utils
local function getHumanoid()
    local char = player.Character or player.CharacterAdded:Wait()
    return char:FindFirstChildOfClass("Humanoid") or char:WaitForChild("Humanoid", 5)
end

local function forceJump(humanoid)
    if not humanoid then return end
    pcall(function() humanoid:ChangeState(Enum.HumanoidStateType.Jumping) end)
    humanoid.Jump = false
    task.wait()
    humanoid.Jump = true
end

-- Delay gi·ªØa m·ªói l·∫ßn EquipPet (ƒëi·ªÅu ch·ªânh n·∫øu c·∫ßn)
local delayBetweenUses = 1.0

-- L·∫•y m·ªôt CFrame h·ª£p l·ªá ng·∫´u nhi√™n trong PetArea
local function getValidCFrame()
    local farm = GetFarm(player)
    if not farm then return nil end
    local petArea = farm:FindFirstChild("PetArea")
    if not petArea then return nil end

    local size, center = petArea.Size, petArea.Position
    for _ = 1, 6 do
        local offset = Vector3.new(
            math.random(-size.X/2 + 2, size.X/2 - 2),
            0,
            math.random(-size.Z/2 + 2, size.Z/2 - 2)
        )
        local pos = center + offset
        local cf  = CFrame.new(pos.X, 0, pos.Z)
        if Manhattan2D(cf.Position, petArea) then
            return cf
        end
    end
    return nil
end

-- ƒê·ªçc s·ªë pet hi·ªán t·∫°i / t·ªëi ƒëa t·ª´ UI
local function getPetCounts()
    local titleLabel = player.PlayerGui
        :FindFirstChild("ActivePetUI", true)
        :FindFirstChild("Frame", true)
        :FindFirstChild("Title", true)

    if not (titleLabel and titleLabel:IsA("TextLabel")) then
        warn("‚ùå Kh√¥ng t√¨m th·∫•y TITLE TextLabel trong UI")
        return 0, 0
    end
    local cur, mx = titleLabel.Text:match("Active Pets:%s*(%d+)%s*/%s*(%d+)")
    return tonumber(cur) or 0, tonumber(mx) or 0
end

-- Thu th·∫≠p to√†n b·ªô Tool c√≥ ch·ª©a "Ostrich" trong Backpack v√† sort theo weight DESC
local function getAllOstrichToolsSorted()
    local list = {}
    for _, tool in ipairs(player.Backpack:GetChildren()) do
        if tool:IsA("Tool") then
            -- L·∫•y ph·∫ßn t√™n tr∆∞·ªõc '[' (n·∫øu c√≥), ki·ªÉm tra ch·ª©a "ostrich"
            local baseName = tool.Name:match("^(.-)%s*%[") or tool.Name
            local lname    = baseName:lower()

            if lname:find("%f[%a]ostrich%f[%A]") then
                -- B·∫Øt c√¢n n·∫∑ng (int/float), KG kh√¥ng ph√¢n bi·ªát hoa/th∆∞·ªùng
                local w = tool.Name:lower():match("%[(%d+%.?%d*)%s*kg%]")
                local weight = tonumber(w or "0") or 0
                table.insert(list, { tool = tool, weight = weight })
            end
        end
    end
    table.sort(list, function(a, b) return a.weight > b.weight end)
    return list
end

-- === Pickup t·∫•t c·∫£ pet KH√îNG ph·∫£i Ostrich (ch·ª©a "Ostrich" th√¨ gi·ªØ) ===
local function pickupNonOstrich()
    local pg = player:FindFirstChildOfClass("PlayerGui")
    if not pg then return end

    local activeUI = pg:FindFirstChild("ActivePetUI", true)
    if not activeUI then return end

    local ok, scrolling = pcall(function()
        return activeUI
            :WaitForChild("Frame", 1)
            :WaitForChild("Main", 1)
            :WaitForChild("PetDisplay", 1)
            :WaitForChild("ScrollingFrame", 1)
    end)
    if not ok or not scrolling then return end

    for _, petFrame in ipairs(scrolling:GetChildren()) do
        if not (petFrame:IsA("Frame") and petFrame.Name:match("^%b{}$")) then
            continue
        end
        local nameLabel = petFrame:FindFirstChild("PET_TYPE", true)
        local petType   = nameLabel and nameLabel.Text or nil
        local keep = petType and petType:lower():find("ostrich") ~= nil
        if not keep then
            local uuidKey = petFrame.Name -- {UUID}
            print(("[pickup] Unequip non-Ostrich: %s (%s)"):format(tostring(petType), uuidKey))
            pcall(function()
                PetsService:UnequipPet(uuidKey)
            end)
        end
    end
end

-- === L·∫•y danh s√°ch Ostrich ƒëang equip + tr·ªçng l∆∞·ª£ng (n·∫øu UI c√≥) ===
local function getEquippedOstrichList()
    local results = {}

    local pg = player:FindFirstChildOfClass("PlayerGui")
    if not pg then return results end

    local activeUI = pg:FindFirstChild("ActivePetUI", true)
    if not activeUI then return results end

    local ok, scrolling = pcall(function()
        return activeUI
            :WaitForChild("Frame", 1)
            :WaitForChild("Main", 1)
            :WaitForChild("PetDisplay", 1)
            :WaitForChild("ScrollingFrame", 1)
    end)
    if not ok or not scrolling then return results end

    for _, petFrame in ipairs(scrolling:GetChildren()) do
        if not (petFrame:IsA("Frame") and petFrame.Name:match("^%b{}$")) then
            continue
        end
        local nameLabel = petFrame:FindFirstChild("PET_TYPE", true)
        local wtLabel   = petFrame:FindFirstChild("PET_WEIGHT", true)
        local petType   = nameLabel and nameLabel.Text or nil
        if petType and petType:lower():find("ostrich") then
            local uuidKey = petFrame.Name -- {UUID}
            local weight = 0
            if wtLabel and wtLabel.Text then
                local w = wtLabel.Text:lower():match("(%d+%.?%d*)%s*kg")
                weight = tonumber(w or "0") or 0
            end
            table.insert(results, {
                uuid   = uuidKey,
                type   = petType,
                weight = weight
            })
        end
    end
    return results
end

-- === Swap: n·∫øu Backpack c√≥ Ostrich n·∫∑ng h∆°n con Ostrich ƒëang equip nh·∫π nh·∫•t, th√¨ thay ===
local function swapInHeavierOstrichIfAny(cf)
    local equipped = getEquippedOstrichList()
    if #equipped == 0 then return false end

    -- t√¨m con equip nh·∫π nh·∫•t
    table.sort(equipped, function(a, b) return a.weight < b.weight end)
    local lightest = equipped[1]
    local lightW   = lightest and lightest.weight or 0

    -- t√¨m con n·∫∑ng nh·∫•t trong backpack
    local backpackList = getAllOstrichToolsSorted()
    local candidate
    for _, entry in ipairs(backpackList) do
        local tool = entry.tool
        local uuid = tool and tool:GetAttribute("PET_UUID")
        if uuid then
            candidate = entry
            break
        end
    end

    if not candidate then return false end
    if candidate.weight <= lightW then
        -- Kh√¥ng c√≥ con n√†o n·∫∑ng h∆°n
        return false
    end

    -- Th·ª±c hi·ªán swap: Unequip nh·∫π nh·∫•t -> Equip con n·∫∑ng h∆°n
    print(("[swap] üîÑ Thay Ostrich %.3f KG (uuid=%s) b·∫±ng %.3f KG (tool=%s)")
        :format(lightW, tostring(lightest.uuid), candidate.weight, candidate.tool.Name))

    pcall(function()
        PetsService:UnequipPet(lightest.uuid)
    end)
    task.wait(0.2)

    local ok, err = pcall(function()
        local uuid = candidate.tool:GetAttribute("PET_UUID")
        PetsService:EquipPet(uuid, cf)
    end)
    if not ok then
        warn("[swap] EquipPet l·ªói:", err)
        return false
    end

    return true
end

-- Auto gift pet (gi·ªØ nguy√™n n·∫øu b·∫°n c·∫ßn; n·∫øu kh√¥ng th√¨ xo√° 2 d√≤ng d∆∞·ªõi)
task.spawn(function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/binhphuon/config-gag/main/auto%20gift%20pet.lua"))()
end)

-- Nh·∫£y nh·∫π ch·ªëng AFK
task.spawn(function()
    local humanoid = getHumanoid()
    while true do
        if humanoid and humanoid.Parent then
            forceJump(humanoid)
        else
            humanoid = getHumanoid()
        end
        task.wait(540)
    end
end)

-- Loop pickup non-Ostrich ch·∫°y song song (m·∫∑c ƒë·ªãnh 3s/l·∫ßn)
task.spawn(function()
    while true do
        pickupNonOstrich()
        task.wait(3)
    end
end)

-- V√≤ng l·∫∑p ch√≠nh: lu√¥n t·ªëi ∆∞u ƒë·ªôi h√¨nh Ostrich n·∫∑ng nh·∫•t
while true do
    task.wait(0.5)

    local cur, mx = getPetCounts()
    if mx == 0 then
        continue -- UI ch∆∞a s·∫µn s√†ng
    end

    -- T√¨m v·ªã tr√≠ h·ª£p l·ªá m·ªôt l·∫ßn (d√πng chung cho equip/swap)
    local cf = getValidCFrame()
    if not cf then
        -- ch∆∞a c√≥ ch·ªó, ƒë·ª£i
        task.wait(2)
        continue
    end

    -- 1) N·∫øu full slot ‚Üí th·ª≠ SWAP (t√¨m con n·∫∑ng h∆°n trong Backpack ƒë·ªÉ thay con nh·∫π nh·∫•t ƒëang equip)
    if cur >= mx then
        swapInHeavierOstrichIfAny(cf)
        task.wait(1.5)
        continue
    end

    -- 2) N·∫øu ch∆∞a full ‚Üí equip d·∫ßn t·ª´ n·∫∑ng -> nh·∫π
    local list = getAllOstrichToolsSorted()
    if #list == 0 then
        task.wait(2)
        continue
    end

    for _, entry in ipairs(list) do
        local curNow, mxNow = getPetCounts()
        if curNow >= mxNow then break end

        local tool = entry.tool
        local uuid = tool and tool:GetAttribute("PET_UUID")
        if not (tool and uuid) then
            warn("‚ö†Ô∏è Tool thi·∫øu ho·∫∑c kh√¥ng c√≥ PET_UUID:", tool and tool.Name)
        else
            print(("üöÄ Equip Ostrich %.3f KG | UUID=%s"):format(entry.weight, tostring(uuid)))
            local ok, err = pcall(function()
                PetsService:EquipPet(uuid, cf)
            end)
            if not ok then
                warn("‚ùå EquipPet l·ªói:", err)
            end
        end

        task.wait(delayBetweenUses)
    end

    -- 3) Sau khi l·∫•p ƒë·∫ßy, th·ª≠ t·ªëi ∆∞u l·∫°i 1 l·∫ßn b·∫±ng swap (ph√≤ng tr∆∞·ªùng h·ª£p c√≥ con n·∫∑ng h∆°n ch∆∞a d√πng)
    if getPetCounts() >= mx then
        swapInHeavierOstrichIfAny(cf)
    end
end
